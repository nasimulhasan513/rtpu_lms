generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  name       String?
  phone      String?
  email      String?
  google_id  String?
  image      String?
  institute  String?
  hsc_batch  String?
  role       UserRole  @default(STUDENT)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  enrollments            CourseEnrollment[]
  submissions            Submission[]
  notifications          Notification[]
  notification_receivers NotificationReceiver[]
  lesson_progresses      LessonProgress[]
  questions              Question[]
  Session                Session[]

  @@index([email])
  @@index([phone])
  @@index([google_id])
  @@map("users")
}

enum UserRole {
  ADMIN
  MODERATOR
  STUDENT
}

model Session {
  id      String   @id @default(uuid())
  user_id String
  expires DateTime
  user    User     @relation(fields: [user_id], references: [id])

  @@map("sessions")
}

model ResetToken {
  id         String   @id @db.Uuid
  otp        String
  expires_at DateTime
  email      String?
  phone      String?
  sent_at    DateTime @default(now())

  @@map("reset_tokens")
}

model Teacher {
  id          String    @id @db.Uuid
  name        String
  image       String
  designation String
  deleted_at  DateTime?

  courseteacher CourseTeacher[]
  lesson        Lesson[]

  @@map("teachers")
}

model Category {
  id         String    @id @db.Uuid
  name       String
  slug       String    @unique
  image      String?
  deleted_at DateTime?

  courses     Course[]
  enrollments CourseEnrollment[]

  @@map("categories")
}

model Course {
  id                String       @id @db.Uuid
  slug              String       @unique
  name              String
  short_description String
  description       String
  category_id       String       @db.Uuid
  image             String
  promo_video       String?
  sale_price        Int
  regular_price     Int
  status            CourseStatus @default(DRAFT)
  duration          Int
  enrolled          Int
  fb_group          String?
  tg_group          String?
  deleted_at        DateTime?
  keywords          String[]
  order             Int          @default(0)
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt

  teachers       CourseTeacher[]
  lessons        CourseLesson[]
  exams          CourseExam[]
  enrollments    CourseEnrollment[]
  coupon_courses CouponCourse[]

  category Category @relation(fields: [category_id], references: [id])

  @@index([category_id])
  @@index([slug])
  @@index([status])
  @@index([created_at])
  @@map("courses")
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model CourseTeacher {
  course_id  String @db.Uuid
  teacher_id String @db.Uuid
  order      Int    @default(0)

  course  Course  @relation(fields: [course_id], references: [id])
  teacher Teacher @relation(fields: [teacher_id], references: [id])

  @@unique([course_id, teacher_id])
  @@index([course_id])
  @@index([teacher_id])
  @@map("course_teachers")
}

model Coupon {
  id              String    @id @db.Uuid
  code            String    @unique
  discount        Float
  max_usage_limit Int       @default(1)
  used            Int       @default(1)
  expiry_date     DateTime
  created_at      DateTime  @default(now())
  deleted_at      DateTime?

  enrollments CourseEnrollment[]
  courses     CouponCourse[]

  @@index([expiry_date])
  @@index([code])
  @@map("coupons")
}

model CouponCourse {
  coupon_id String @db.Uuid
  course_id String @db.Uuid

  coupon Coupon @relation(fields: [coupon_id], references: [id])
  course Course @relation(fields: [course_id], references: [id])

  @@unique([coupon_id, course_id])
  @@map("coupon_courses")
}

model CourseEnrollment {
  id               String    @id @db.Uuid
  user_id          String
  course_id        String    @db.Uuid
  transaction_id   String    @unique
  price            Int
  discount         Int
  gateway_response Json?
  status           String    @default("pending")
  enrolled_at      DateTime  @default(now())
  coupon_id        String?   @db.Uuid
  category_id      String?   @db.Uuid
  enrolled_by      String?
  deleted_at       DateTime?

  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  course   Course    @relation(fields: [course_id], references: [id], onDelete: Cascade)
  coupon   Coupon?   @relation(fields: [coupon_id], references: [id], onDelete: SetNull)
  category Category? @relation(fields: [category_id], references: [id], onDelete: SetNull)

  @@unique([user_id, course_id])
  @@index([transaction_id])
  @@index([status])
  @@index([enrolled_at])
  @@map("course_enrollments")
}

model Subject {
  id         String    @id @db.Uuid
  name       String
  order      Int       @default(0)
  deleted_at DateTime?

  chapters  Chapter[]
  lessons   Lesson[]
  questions Question[]
  exam      Exam[]

  @@map("subjects")
}

model Chapter {
  id         String    @id @db.Uuid
  name       String
  subject_id String    @db.Uuid
  deleted_at DateTime?

  subject  Subject    @relation(fields: [subject_id], references: [id])
  lessons  Lesson[]
  question Question[]

  @@index([subject_id])
  @@map("chapters")
}

model Lesson {
  id              String    @id @db.Uuid
  title           String
  subject_id      String    @db.Uuid
  chapter_id      String    @db.Uuid
  teacher_id      String    @db.Uuid
  source          String
  content         String?
  pdf             String?
  is_archive      Boolean   @default(false)
  is_downloadable Boolean   @default(false)
  order           Int       @default(0)
  schedule        DateTime?
  video_duration  Int?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  subject        Subject          @relation(fields: [subject_id], references: [id])
  chapter        Chapter          @relation(fields: [chapter_id], references: [id])
  teacher        Teacher          @relation(fields: [teacher_id], references: [id])
  courses        CourseLesson[]
  lessonprogress LessonProgress[]

  @@index([subject_id])
  @@index([chapter_id])
  @@index([teacher_id])
  @@index([is_archive])
  @@index([schedule])
}

model LessonProgress {
  id           String    @id @db.Uuid
  user_id      String
  lesson_id    String    @db.Uuid
  completed    Boolean   @default(false)
  bookmark     Boolean   @default(false)
  note         String?
  last_visited DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  user   User   @relation(fields: [user_id], references: [id])
  lesson Lesson @relation(fields: [lesson_id], references: [id])

  @@unique([user_id, lesson_id])
  @@index([user_id])
  @@index([lesson_id])
  @@map("lesson_progresses")
}

model CourseLesson {
  id        String @id @db.Uuid
  course_id String @db.Uuid
  lesson_id String @db.Uuid
  order     Int    @default(0)

  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lesson_id], references: [id], onDelete: Cascade)

  @@unique([course_id, lesson_id])
  @@index([course_id])
  @@index([lesson_id])
  @@map("course_lessons")
}

model Option {
  id          String  @id @db.Uuid
  option_text String
  correct     Boolean
  question_id String  @db.Uuid

  question Question @relation(fields: [question_id], references: [id])

  @@index([question_id])
  @@map("exam_question_options")
}

model Question {
  id         String             @id @db.Uuid
  question   String
  difficulty QuestionDifficulty @default(MEDIUM)
  subject_id String             @db.Uuid
  chapter_id String?            @db.Uuid
  exam_id    String?            @db.Uuid
  explain    String?
  serial     Int?
  creator_id String?
  tags       String[]
  created_at DateTime           @default(now())
  updated_at DateTime           @updatedAt
  deleted_at DateTime?

  options Option[]
  exam    Exam?    @relation(fields: [exam_id], references: [id])
  subject Subject  @relation(fields: [subject_id], references: [id])
  chapter Chapter? @relation(fields: [chapter_id], references: [id])
  creator User?    @relation(fields: [creator_id], references: [id])

  @@index([exam_id])
  @@index([subject_id])
  @@index([chapter_id])
  @@index([creator_id])
  @@map("exam_questions")
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

model Exam {
  id                  String    @id @db.Uuid
  title               String
  description         String?
  start_time          DateTime
  end_time            DateTime
  duration            Int
  total_marks         Int
  instant_result      Boolean   @default(false)
  negative_marking    Boolean   @default(false)
  shuffle_question    Boolean   @default(false)
  result_publish_time DateTime?
  pass_marks          Int?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  deleted_at          DateTime?
  subject_id          String?   @db.Uuid

  submissions  Submission[]
  questions    Question[]
  subject      Subject?     @relation(fields: [subject_id], references: [id])
  course_exams CourseExam[]

  @@index([subject_id])
  @@index([start_time])
  @@index([end_time])
  @@map("exams")
}

model CourseExam {
  id        String @id @db.Uuid
  course_id String @db.Uuid
  exam_id   String @db.Uuid

  course Course @relation(fields: [course_id], references: [id])
  exam   Exam   @relation(fields: [exam_id], references: [id])

  @@unique([course_id, exam_id])
  @@map("course_exams")
}

model Submission {
  id           String           @id @default(uuid())
  user_id      String
  exam_id      String           @db.Uuid
  answers      Json?
  attempt      Int              @default(1)
  marks        Float            @default(0)
  passed       Boolean          @default(false)
  correct      Int?             @default(0)
  wrong        Int?             @default(0)
  skipped      Int?             @default(0)
  duration     Int?
  rank         Int?
  status       SubmissionStatus @default(PENDING)
  submitted_at DateTime?
  created_at   DateTime         @default(now())
  updated_at   DateTime         @updatedAt

  user User @relation(fields: [user_id], references: [id])
  exam Exam @relation(fields: [exam_id], references: [id])

  @@index([user_id, exam_id])
  @@index([status])
  @@map("exam_submissions")
}

enum SubmissionStatus {
  PENDING
  COMPLETED
  FAILED
}

model Notification {
  id         String   @id @default(uuid())
  user_id    String
  type       String
  message    String
  link       String?
  created_at DateTime @default(now())

  user                 User                   @relation(fields: [user_id], references: [id])
  notificationreceiver NotificationReceiver[]

  @@index([user_id])
  @@index([type])
  @@map("notifications")
}

model NotificationReceiver {
  id              String   @id @default(uuid())
  user_id         String
  notification_id String
  is_read         Boolean  @default(false)
  created_at      DateTime @default(now())

  user         User         @relation(fields: [user_id], references: [id])
  notification Notification @relation(fields: [notification_id], references: [id])

  @@index([user_id, notification_id])
  @@index([is_read])
  @@map("notification_receivers")
}
